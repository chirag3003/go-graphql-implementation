package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"chirag3003/graphql-server/graph/model"
	"context"
	"fmt"
	"time"
)

// AddBook is the resolver for the addBook field.
func (r *mutationResolver) AddBook(ctx context.Context, title string) (*model.Book, error) {
	book := &model.Book{
		Title: title,
	}
	r.database.NewBook(book)
	for i, ch := range r.channels {
		fmt.Println("Sending to channel", i)
		ch <- r.database.GetBooks()
	}
	return book, nil
}

// Placeholder is the resolver for the placeholder field.
func (r *queryResolver) Placeholder(ctx context.Context) (*string, error) {
	str := "Hello World"
	return &str, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	//db := ctx.Value("db").(*db2.DB)
	return r.database.GetBooks(), nil
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	ch := make(chan *model.Time)

	go func() {
		defer close(ch)

		for {
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			currentTime := time.Now()

			t := &model.Time{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			select {
			case <-ctx.Done():
				// Exit on cancellation
				fmt.Println("Subscription closed.")
				return

			case ch <- t:
				// Our message went through, do nothing
			}

		}
	}()
	return ch, nil
}

// Books is the resolver for the books field.
func (r *subscriptionResolver) Books(ctx context.Context) (<-chan []*model.Book, error) {
	ch := make(chan []*model.Book)
	go func() {
		receiver := make(chan []*model.Book)
		fmt.Println("Subscribing to books")
		r.NewChannel(receiver)
		defer close(ch)

		ch <- r.database.GetBooks()
		for {
			var books []*model.Book
			//books = <-receiver

			select {
			case <-ctx.Done():
				// Exit on cancellation
				fmt.Println("Subscription closed.")
				return
			case books = <-receiver:
				fmt.Println(books)
				ch <- books
				//case ch <- books:
				// Our message went through, do nothing
			}

		}
	}()
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
